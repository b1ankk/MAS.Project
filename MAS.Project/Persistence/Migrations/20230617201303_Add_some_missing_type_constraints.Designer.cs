// <auto-generated />
using System;
using MAS.Project.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MAS.Project.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230617201303_Add_some_missing_type_constraints")]
    partial class Add_some_missing_type_constraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MAS.Project.Model.MedicalWorker", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EmployedDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("MedicalWorker");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MAS.Project.Model.Medication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<decimal>("StandardPrice")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("MAS.Project.Model.MedicationOnPrescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("FractionRefunded")
                        .HasPrecision(8, 5)
                        .HasColumnType("decimal(8,5)");

                    b.Property<long>("MedicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("MedicationOnPrescription");
                });

            modelBuilder.Entity("MAS.Project.Model.Patient", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MAS.Project.Model.Prescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DoctorIssuedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuerLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<long>("ServiceResultId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorIssuedById");

                    b.HasIndex("ServiceResultId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("MAS.Project.Model.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CronForTimeSlotGeneration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceReferral", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorIssuedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("date");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<long>("ServiceResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorIssuedById");

                    b.HasIndex("ServiceResultId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceReferral");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceResult", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExaminationResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientIssuedForId")
                        .HasColumnType("bigint");

                    b.Property<string>("Recommendations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientIssuedForId");

                    b.ToTable("ServiceResult");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceTimeSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PatientBookedById")
                        .HasColumnType("bigint");

                    b.Property<string>("PatientsNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientBookedById");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceTimeSlot");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<TimeSpan?>("MaxDuration")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MaxStartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MinDuration")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MinStartTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecommendationsBeforeService")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("MAS.Project.Model.SickLeave", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CompanyNip")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<long>("DoctorIssuedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuerLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DoctorIssuedById");

                    b.ToTable("SickLeave");
                });

            modelBuilder.Entity("MAS.Project.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("MedicalWorkerService", b =>
                {
                    b.Property<long>("ConductedServicesId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicalWorkersConductingId")
                        .HasColumnType("bigint");

                    b.HasKey("ConductedServicesId", "MedicalWorkersConductingId");

                    b.HasIndex("MedicalWorkersConductingId");

                    b.ToTable("MedicalWorkerService");
                });

            modelBuilder.Entity("MedicalWorkerServiceType", b =>
                {
                    b.Property<long>("AuthorizedMedicalWorkersId")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorizedServiceTypesId")
                        .HasColumnType("bigint");

                    b.HasKey("AuthorizedMedicalWorkersId", "AuthorizedServiceTypesId");

                    b.HasIndex("AuthorizedServiceTypesId");

                    b.ToTable("MedicalWorkerServiceType");
                });

            modelBuilder.Entity("MAS.Project.Model.Doctor", b =>
                {
                    b.HasBaseType("MAS.Project.Model.MedicalWorker");

                    b.Property<string>("AcademicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specializations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("MAS.Project.Model.Nurse", b =>
                {
                    b.HasBaseType("MAS.Project.Model.MedicalWorker");

                    b.Property<string>("Certificates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("MAS.Project.Model.MedicalWorker", b =>
                {
                    b.HasOne("MAS.Project.Model.User", "Parent")
                        .WithOne()
                        .HasForeignKey("MAS.Project.Model.MedicalWorker", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MAS.Project.Model.MedicationOnPrescription", b =>
                {
                    b.HasOne("MAS.Project.Model.Medication", "Medication")
                        .WithMany("MedicationOnPrescriptions")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.Prescription", "Prescription")
                        .WithMany("MedicationsOnPrescription")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("MAS.Project.Model.Patient", b =>
                {
                    b.HasOne("MAS.Project.Model.User", "ParentUser")
                        .WithOne()
                        .HasForeignKey("MAS.Project.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("MAS.Project.Model.Prescription", b =>
                {
                    b.HasOne("MAS.Project.Model.Doctor", "DoctorIssuedBy")
                        .WithMany("PrescriptionsIssued")
                        .HasForeignKey("DoctorIssuedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.ServiceResult", "ServiceResult")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ServiceResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorIssuedBy");

                    b.Navigation("ServiceResult");
                });

            modelBuilder.Entity("MAS.Project.Model.Service", b =>
                {
                    b.HasOne("MAS.Project.Model.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceReferral", b =>
                {
                    b.HasOne("MAS.Project.Model.Doctor", "DoctorIssuedBy")
                        .WithMany("ServiceReferralsIssued")
                        .HasForeignKey("DoctorIssuedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.ServiceTimeSlot", "ServiceTimeSlotBooked")
                        .WithOne("ServiceReferralBookedWith")
                        .HasForeignKey("MAS.Project.Model.ServiceReferral", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.ServiceResult", "ServiceResult")
                        .WithMany("ServiceReferrals")
                        .HasForeignKey("ServiceResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.ServiceType", "ServiceType")
                        .WithMany("ServiceReferrals")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorIssuedBy");

                    b.Navigation("ServiceResult");

                    b.Navigation("ServiceTimeSlotBooked");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceResult", b =>
                {
                    b.HasOne("MAS.Project.Model.ServiceTimeSlot", "ServiceTimeSlot")
                        .WithOne("ServiceResult")
                        .HasForeignKey("MAS.Project.Model.ServiceResult", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.Patient", "PatientIssuedFor")
                        .WithMany("ServiceResults")
                        .HasForeignKey("PatientIssuedForId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientIssuedFor");

                    b.Navigation("ServiceTimeSlot");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceTimeSlot", b =>
                {
                    b.HasOne("MAS.Project.Model.Patient", "PatientBookedBy")
                        .WithMany("BookedServiceTimeSlots")
                        .HasForeignKey("PatientBookedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MAS.Project.Model.Service", "Service")
                        .WithMany("ServiceTimeSlots")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientBookedBy");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MAS.Project.Model.SickLeave", b =>
                {
                    b.HasOne("MAS.Project.Model.Doctor", "DoctorIssuedBy")
                        .WithMany("SickLeavesIssued")
                        .HasForeignKey("DoctorIssuedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.ServiceResult", "ServiceResult")
                        .WithOne("SickLeave")
                        .HasForeignKey("MAS.Project.Model.SickLeave", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorIssuedBy");

                    b.Navigation("ServiceResult");
                });

            modelBuilder.Entity("MAS.Project.Model.User", b =>
                {
                    b.OwnsOne("MAS.Project.Model.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("ApartmentNumber")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalWorkerService", b =>
                {
                    b.HasOne("MAS.Project.Model.Service", null)
                        .WithMany()
                        .HasForeignKey("ConductedServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.MedicalWorker", null)
                        .WithMany()
                        .HasForeignKey("MedicalWorkersConductingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalWorkerServiceType", b =>
                {
                    b.HasOne("MAS.Project.Model.MedicalWorker", null)
                        .WithMany()
                        .HasForeignKey("AuthorizedMedicalWorkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Project.Model.ServiceType", null)
                        .WithMany()
                        .HasForeignKey("AuthorizedServiceTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAS.Project.Model.Doctor", b =>
                {
                    b.HasOne("MAS.Project.Model.MedicalWorker", null)
                        .WithOne()
                        .HasForeignKey("MAS.Project.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAS.Project.Model.Nurse", b =>
                {
                    b.HasOne("MAS.Project.Model.MedicalWorker", null)
                        .WithOne()
                        .HasForeignKey("MAS.Project.Model.Nurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAS.Project.Model.Medication", b =>
                {
                    b.Navigation("MedicationOnPrescriptions");
                });

            modelBuilder.Entity("MAS.Project.Model.Patient", b =>
                {
                    b.Navigation("BookedServiceTimeSlots");

                    b.Navigation("ServiceResults");
                });

            modelBuilder.Entity("MAS.Project.Model.Prescription", b =>
                {
                    b.Navigation("MedicationsOnPrescription");
                });

            modelBuilder.Entity("MAS.Project.Model.Service", b =>
                {
                    b.Navigation("ServiceTimeSlots");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceResult", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("ServiceReferrals");

                    b.Navigation("SickLeave");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceTimeSlot", b =>
                {
                    b.Navigation("ServiceReferralBookedWith");

                    b.Navigation("ServiceResult");
                });

            modelBuilder.Entity("MAS.Project.Model.ServiceType", b =>
                {
                    b.Navigation("ServiceReferrals");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("MAS.Project.Model.Doctor", b =>
                {
                    b.Navigation("PrescriptionsIssued");

                    b.Navigation("ServiceReferralsIssued");

                    b.Navigation("SickLeavesIssued");
                });
#pragma warning restore 612, 618
        }
    }
}
